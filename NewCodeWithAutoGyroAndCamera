package org.usfirst.frc.team1758.robot;


import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.RobotDrive.MotorType;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.image.BinaryImage;
import edu.wpi.first.wpilibj.image.ColorImage;
//import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.interfaces.Gyro;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.vision.AxisCamera;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	RobotDrive tmDrive;
	Joystick xBox1;
	Joystick xBox2;
	ADXRS450_Gyro aGyro;
	CameraServer mCam;
	AxisCamera technoCam;
	Relay mCamLight;
	// camLight;
	Ultrasonic mRange1;
	Encoder mLeftDrive;
	Encoder mRightDrive;
	Encoder mArmPos1;
	Timer autoTimer1;
	Timer autoTimer2;
	
	
    double aGyroAngle = 0.0;
	double mLeftDistance = 0.0;
	double mRightDistance = 0.0;
	double m_RangeInches1;
	double m_AutoTimer1 = 0.0;
	double m_AutoTimer2 = 0.0;
	double m_xBox1X = 0.0;
	double m_xBox1Y = 0.0;
	double mdistance = 0.0;
	int m_AutoState = 0;
	final String defaultAuto = "Default";
    final String customAuto = "My Auto";
    String autoSelected;
    SendableChooser chooser;
	
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     * @return 
     */
 
    public void robotInit() {
    	tmDrive = new RobotDrive(0,1);
      	xBox1 = new Joystick(0);
    	xBox2 = new Joystick(1);
    	aGyro = new ADXRS450_Gyro();
    	technoCam = new AxisCamera("10.17.58.11");
    	mLeftDrive = new Encoder(0,1,false);
    	mRightDrive = new Encoder(2,3,false);
    	autoTimer1 = new Timer();
    	autoTimer2 = new Timer();
    	
    	chooser = new SendableChooser();
        chooser.addDefault("Default Auto", defaultAuto);
        chooser.addObject("My Auto", customAuto);
        SmartDashboard.putData("Auto choices", chooser);
        //tmDrive.setInvertedMotor(MotorType.kFrontLeft,true);
        //tmDrive.setInvertedMotor(MotorType.kFrontRight,false);

        //Setup Gyro 
        aGyro.calibrate();
        aGyroAngle = (aGyro.getAngle());
        SmartDashboard.putNumber("Gyro Angle", aGyroAngle);
        //setup camera server
        mCam = CameraServer.getInstance();
        mCam.setQuality(100);
        mCam.startAutomaticCapture("cam0");
        //Setup encoders
        mLeftDrive.setDistancePerPulse((4.00*3.1415)/200);
        mRightDrive.setDistancePerPulse((4.00*3.1415)/200);
        mLeftDrive.reset();
        mRightDrive.reset();
		mLeftDistance = mLeftDrive.getDistance();
		mRightDistance = mRightDrive.getDistance();
        SmartDashboard.putNumber("Left Distance", mLeftDistance);
        SmartDashboard.putNumber("Right Distance", mRightDistance);
        //setup range finder
        mRange1 = new Ultrasonic(4,5);
        mRange1.setAutomaticMode(true);
        m_RangeInches1 = mRange1.getRangeInches();
        SmartDashboard.putNumber("Distance", m_RangeInches1);
    }
    
	/**
	 * This autonomous (along with the chooser code above) shows how to select between different autonomous modes
	 * using the dashboard. The sendable chooser code works with the Java SmartDashboard. If you prefer the LabVIEW
	 * Dashboard, remove all of the chooser code and uncomment the getString line to get the auto name from the text box
	 * below the Gyro
	 *
	 * You can add additional auto modes by adding additional comparisons to the switch structure below with additional strings.
	 * If using the SendableChooser make sure to add them to the chooser code above as well.
	 */
    public void	 autonomousInit() {
    	autoSelected = (String) chooser.getSelected();
//		autoSelected = SmartDashboard.getString("Auto Selector", defaultAuto);
		System.out.println("Auto selected: " + autoSelected);
		m_AutoState++;
		autoTimer1.start();
		m_AutoTimer1 = 3.0;
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
    
    
    	
		switch(m_AutoState) {
		
    	case 1:
        //Put custom auto code here 
    		tmDrive.tankDrive(0.725, 0.725);
    		if (autoTimer1.hasPeriodPassed(m_AutoTimer1)){
    	
    		m_AutoState = 2;
    		}
            break;
    	case 2:
    	tmDrive.tankDrive(0.0, 0.0);	
    	m_AutoState = 3;
    	
    	break;
    	case 3:
    		autoTimer1.reset();
    		m_AutoState = 4;
    	case 4:
    		while(aGyroAngle > 0.4){tmDrive.tankDrive(-0.2, 0.2);}
    		while(aGyroAngle < -0.4){tmDrive.tankDrive(0.2, -0.2);}
    		if(aGyroAngle < 1.0 && aGyroAngle > -1.0)
    		{
    			m_AutoState = 0;
    		}
    		m_AutoState = 0;
    		break;
    	default:
    		
    
    		
    		//for(int i = 0; i < 99; i++)
    		//{
    		//tmDrive.tankDrive(.8, .8);
    		//}
    		//tmDrive.tankDrive(0.0, 0.0);
    		break;
    	
    	}}
    
    public void teleopInit() {
    	aGyro.reset();
    	mLeftDrive.reset();
    	mRightDrive.reset();
    }
   
    

    public void teleopPeriodic() {
        aGyroAngle = (aGyro.getAngle());
		mLeftDistance = mLeftDrive.getDistance();
		mRightDistance = mRightDrive.getDistance();
        SmartDashboard.putNumber("Gyro Angle", aGyroAngle);
        SmartDashboard.putNumber("Left Distance", mLeftDistance);
        SmartDashboard.putNumber("Right Distance", mRightDistance);
        //SmartDashboard.putNumber("Range", m_RangeInches);
        //Debug for drive control   consider multiplying by kFactor
        m_xBox1X = xBox1.getRawAxis(1)*(-0.8);
        m_xBox1Y = xBox1.getRawAxis(5)*(-0.8);
        SmartDashboard.putNumber("Xbox A",m_xBox1X);
        SmartDashboard.putNumber("Xbox B",m_xBox1Y);
        if(xBox1.getRawButton(1))
        {
        	mCamLight.set(Relay.Value.kOn);
        } else {
        	mCamLight.set(Relay.Value.kOff);
        }
        if(xBox2.getRawButton(2))
        {
        	centerCalculate();
        }
      
        tmDrive.tankDrive(m_xBox1X, m_xBox1Y);
        SmartDashboard.putNumber("Distance", m_RangeInches1);
        tmDrive.setMaxOutput(0.8);
    }
    


	private void centerCalculate() {
		// TODO Auto-generated method stub
		ColorImage image = null;
		BinaryImage thresholdImage = null;
		BinaryImage bigObjectsImage = null;
		BinaryImage convexHullImage = null;
		BinaryImage filteredImage = null;
		try {
			image = technoCam.getImage();
			thresholdImage = image.thresholdRGB(0, 45, 25, 255, 0, 27);
			bigObjectsImage = thresholdImage.removeSmallObjects(false, 2);
			convexHullImage = bigObjectsImage.convexHull(false);
		} catch(Exception ex){
			
		}try {
			thresholdImage.free();
			bigObjectsImage.free();
			convexHullImage.free();
			
		} catch (Exception ex) {
		}finally {
		}
	}

	public void testPeriodic() {
    
    }
    
}

